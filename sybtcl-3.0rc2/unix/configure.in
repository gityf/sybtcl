dnl  
dnl Sybtcl-2.5 configure.in   Relies heavily on Tcl/Tk/TclX being installed
dnl and finding tclConfig.sh, tkConfig.sh, tclxConfig.sh, tkxConfig.sh
dnl Tom Poindexter
dnl

AC_INIT(../generic/sybtcl.c)
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_CHECK_FUNC(bcopy, , AC_DEFINE(NO_BCOPY))

if test -z "$prefix" -o "$prefix" = "NONE" ; then
    prefix=/usr/local
fi

if test -z "$exec_prefix" -o "$exec_prefix" = "NONE" ; then
    exec_prefix=$prefix
fi

prefix_locations="$prefix /usr/local /usr .."
exec_prefix_locations="$exec_prefix /usr/local /usr .."


#----------------------------------------------------------------------------
#       Get sybtcl.c version, set sh variable SYBTCL_VERSION
#       and set SYBTCL_LIBVER
#----------------------------------------------------------------------------

eval `egrep '^#define SYBTCL_VERSION' ../generic/sybtcl.c | \
      sed -e 's/#define //' -e 's/ *"/="/'`

SYBTCL_LIBVER=`echo $SYBTCL_VERSION | sed -e 's/\.//'`

#----------------------------------------------------------------------------
#       Check where Tcl/Tk and maybe TclX is installed 
#       based on prefix and exec_prefix value
#----------------------------------------------------------------------------

# find include/tcl.h
for f in $prefix_locations ; do
  if test -r "$f/include/tcl.h"; then
    TCL_INC_DIR=$f/include
    AC_MSG_RESULT(setting TCL_INC_DIR to $TCL_INC_DIR)
    break
  fi
done
 
# find lib/tclConfig.sh
for f in $exec_prefix_locations ; do
  if test -r "$f/lib/tclConfig.sh"; then
    TCL_LIB_DIR=$f/lib
    AC_MSG_RESULT(setting TCL_LIB_DIR to $TCL_LIB_DIR)
    break
  fi
done
 
if test -z "$TCL_INC_DIR" ; then
  AC_ERROR(could not find include/tcl.h in $prefix_locations)
fi
if test -z "$TCL_LIB_DIR" ; then
  AC_ERROR(could not find lib/tclConfig.sh in $exec_prefix_locations)
fi

SEARCH_DIRS="$TCL_LIB_DIR"

#----------------------------------------------------------------------------
#       Source the tcl/tk config shells
#----------------------------------------------------------------------------

for f in tclConfig.sh tkConfig.sh ; do
  if test -r "$TCL_LIB_DIR/$f" ; then
    . $TCL_LIB_DIR/$f
    AC_MSG_RESULT(using $TCL_LIB_DIR/$f)
  fi
done

if test -z "$TCL_VERSION" ; then
  AC_ERROR(could not find tclConfig.sh in $TCL_LIB_DIR)
else
  AC_MSG_RESULT(tclConfig.sh has TCL_VERSION = $TCL_VERSION)
fi


#----------------------------------------------------------------------------
#       Set defaults for optional packages tk and tclx
#       These may get turned off if --enable-shared is requested
#----------------------------------------------------------------------------

tk=yes
AC_ARG_WITH(tk, [  --without-tk                 build wish executable (default --with-tk)], tk=$withval,tk=yes)

tclx=no
AC_ARG_WITH(tclx, [  --with-tclx                  build with TclX (default --without-tclx)], tclx=$withval,tclx=no)


#----------------------------------------------------------------------------
#       Check where sybase is installed on this system. Honour the options:
#               --with-sybase-directory=path
#----------------------------------------------------------------------------

AC_ARG_WITH(sybase-directory, [  --with-sybase-directory=DIR  Sybase home directory (default=\$SYBASE)], sybase_directory=$withval)

sybtest1=${SYBASE:-.}
sybtest2=`(egrep ^sybase /etc/passwd | awk -F: '{print $6}' ) 2>/dev/null`
sybtest2=${sybtest2:-.}
sybtest3=`(ypcat passwd | egrep ^sybase | awk -F: '{print $6}' ) 2>/dev/null`
sybtest3=${sybtest3:-.}
sybtest4=`(niscat passwd.org_dir | egrep ^sybase | awk -F: '{print $6}') 2>/dev/null`
sybtest4=${sybtest4:-.}

sybase_locations="$sybase_directory $sybtest1 $sybtest2 $sybtest3 $sybtest4 /opt/sybase /u/sybase /usr/sybase /usr/local/sybase"

for f in $sybase_locations ; do
    if test -r "$f/include/sybdb.h" -o -r "$f/include/ctpublic.h" ; then
        SYBASE="$f"
        AC_MSG_RESULT(setting SYBASE to $SYBASE)
        break
    fi
done

if test -z "$SYBASE" ; then
    AC_MSG_RESULT(Sybase home directory not found in $sybase_locations)
    AC_MSG_RESULT(You can adjust the sybase path to your directory with)
    AC_MSG_RESULT(your sybase distribution:)
    AC_MSG_RESULT(        --with-sybase-directory=<path>)
    AC_ERROR(Could not find the sybase home header/library files.)
fi

#----------------------------------------------------------------------------
#       Check whether to use ctcompt lib
#----------------------------------------------------------------------------

ctcompat=no
AC_ARG_ENABLE(ctlib,
    [  --enable-ctlib               build libSybtcl using Sybase ctlib],
    [ctcompat=$enableval], [ctcompat=no])
# use ctcompat if ctcompat is "yes" OR if dblib headers don't exist
if test "$ctcompat" = "yes" -o ! -r "$SYBASE/lib/libsybdb.a" ; then
    ctcompat=yes
    AC_MSG_RESULT(will use ctlib compatibility lib)
    CTCOMPATINC=-I../generic/ctcompat
    CTCOMPATOBJ=dbtoct.o
    CTCOMPATSHO=shdbtoct.o

    SYB_LIB='$(SYB_LIB_DIR)/libct.a $(SYB_LIB_DIR)/libcs.a $(SYB_LIB_DIR)/libcomn.a $(SYB_LIB_DIR)/libintl.a '
    SYB_SH_LIB='-lct -lcs -lcomn -lintl'

    # check for libtcl.a in sybase dir, linux-elf libs have it as 'libsybtcl.a'
    # libtcl and/or libsybtcl in sybase is a network layer lib, it has 
    # nothing to do with Tcl
    if test -r "$SYBASE/lib/libtcl.a" ; then
      SYB_LIB="$SYB_LIB \$(SYB_LIB_DIR)/libtcl.a"
      SYB_SH_LIB="$SYB_SH_LIB -ltcl"
    fi
    if test -r "$SYBASE/lib/libsybtcl.a" ; then
      SYB_LIB="$SYB_LIB \$(SYB_LIB_DIR)/libsybtcl.a"
      SYB_SH_LIB="$SYB_SH_LIB -lsybtcl"
    fi

    # check for libtli.a in sybase lib dir
    if test -r "$SYBASE/lib/libtli.a" ; then
      SYB_LIB="$SYB_LIB \$(SYB_LIB_DIR)/libtli.a"
      SYB_SH_LIB="$SYB_SH_LIB -ltli"
    fi

    # check for libinsck.a in sybase lib dir
    if test -r "$SYBASE/lib/libinsck.a" ; then
      SYB_LIB="$SYB_LIB \$(SYB_LIB_DIR)/libinsck.a"
      SYB_SH_LIB="$SYB_SH_LIB -linsck"
    fi

else
    CTCOMPATINC=''
    CTCOMPATOBJ=''
    CTCOMPATSHO=''
    SYB_LIB='$(SYB_LIB_DIR)/libsybdb.a'
    SYB_SH_LIB='-lsybdb'
fi



SEARCH_DIRS="${SEARCH_DIRS}:${SYBASE}/lib"

#----------------------------------------------------------------------------
#       Check for libraries need by sybase on some systems
#       borrowed from Tcl 7.6 configure.in
#----------------------------------------------------------------------------

tcl_checkBoth=0
AC_CHECK_FUNC(connect, tcl_checkSocket=0, tcl_checkSocket=1)
if test "$tcl_checkSocket" = 1; then
    AC_CHECK_LIB(socket, main, SYB_SYS_LIBS="$SYB_SYS_LIBS -lsocket", tcl_checkBoth=1)
fi
if test "$tcl_checkBoth" = 1; then
    tk_oldLibs=$SYB_SYS_LIBS
    SYB_SYS_LIBS="$SYB_SYS_LIBS -lsocket -lnsl"
    AC_CHECK_FUNC(accept, tcl_checkNsl=0, [SYB_SYS_LIBS=$tk_oldLibs])
fi
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, main, [SYB_SYS_LIBS="$SYB_SYS_LIBS -lnsl"]))
 
AC_CHECK_LIB(dnet_stub, main, [SYB_SYS_LIBS="$SYB_SYS_LIBS -ldnet_stub"])


#----------------------------------------------------------------------------
#       Check whether shared library should be built
#----------------------------------------------------------------------------

shared=yes
AC_ARG_ENABLE(shared,
  [  --disable-shared             build static lib & exe (default --enable-shared)],
    [shared=$enableval], [shared=yes])
if test "$shared" = "yes" -a "${TCL_SHLIB_SUFFIX}" != ""; then
  if test \( -r "$SYBASE/lib/libsybdb${TCL_SHLIB_SUFFIX}" -a "$ctcompat" != "yes" \) -o \( -r "$SYBASE/lib/libct${TCL_SHLIB_SUFFIX}" -a "$ctcompat" = "yes" \)  ; then
    RANLIB=':'
    AC_MSG_RESULT(will build shared library)
  else
    AC_MSG_RESULT(--enable-shared requested but Sybase shared library not found as)
    if test "$ctcompat" = "yes" ; then
      AC_MSG_RESULT($SYBASE/lib/libct${TCL_SHLIB_SUFFIX})
    else
      AC_MSG_RESULT($SYBASE/lib/libsybdb${TCL_SHLIB_SUFFIX})
    fi
    AC_MSG_RESULT(Building a dynamic shared library for Sybtcl is not possible.)
    AC_MSG_ERROR(halted.)
  fi
else
  if test "$shared" = "yes" ; then
    AC_MSG_RESULT(--enable-shared requested but Tcl is not configured for dynamic loading.)
    AC_MSG_RESULT(Building a dynamic shared library for Sybtcl is not possible.)
    AC_MSG_RESULT(reconfigure Sybtcl with --disable-shared or)
    AC_MSG_RESULT(reconfigure Tcl with --enable-shared.)
  else
    AC_MSG_RESULT(will build static library and executables)
  fi
fi

if test "$shared" = "yes" ; then
  PROGS="libSybtcl${SYBTCL_LIBVER}${TCL_SHLIB_SUFFIX}"
  INSTALL_TARGET=install-shared
  tk=no
  tclx=no
else
  INSTALL_TARGET=install-static
fi


#----------------------------------------------------------------------------
#       Check if tk is installed.  Honour the options:
#               --with-tk=yes|no  --without-tk  (default to yes)
#----------------------------------------------------------------------------

if test "$tk" = "yes" ; then
  if test -z "$TK_VERSION" ; then
    AC_ERROR(could not find tkConfig.sh in $TCL_LIB_DIR)
  else
    AC_MSG_RESULT(tkConfig.sh has TK_VERSION = $TK_VERSION)
    X11_LIB_DIR=`echo ${TK_XLIBSW} |sed -e "s|-L||" -e "s/ .*$//g" -e "s/-l.*$//
g"`
    if test "x${X11_LIB_DIR}" != "x" ; then
      SEARCH_DIRS="${SEARCH_DIRS}:${X11_LIB_DIR}"
    fi
  fi
else
  tk=''
fi


#----------------------------------------------------------------------------
#       Check if tclx is installed on this system. Honour the options:
#               --with-tclx=yes|no  --without-tclx  (default to yes)
#----------------------------------------------------------------------------

TCLX_LIB_SPEC=''
TCLX_LIBS=''
TKX_LIB_SPEC=''
TKX_LIBS=''
TCLX_FULL_VERSION=''
TKX_FULL_VERSION=''
TCLX_LIB_LOC=""
TCLX_LIB_SEP="/"

if test "$tclx" = "yes" ; then
  for f in tclxConfig.sh tkxConfig.sh ; do
    if test -r "$TCL_LIB_DIR/$f" ; then
      . $TCL_LIB_DIR/$f
    fi
  done

  if test -z "$TCLX_FULL_VERSION" ; then
    AC_ERROR(could not find tclxConfig.sh in $TCL_LIB_DIR)
  else
    AC_MSG_RESULT(tclxConfig.sh has TCLX_FULL_VERSION = $TCLX_FULL_VERSION)

    # check if TCLX_LIB_SPEC defined in tclxConfig.sh; if not, build our own
    if test "$TCLX_LIB_SPEC" = "" ; then
      TCLX_LIB_SPEC='-ltclx'
    fi
  fi

  if test -z "$TKX_FULL_VERSION" -a "$tk" = "yes" ; then
    AC_ERROR(could not find tkxConfig.sh in $TCL_LIB_DIR)
  else
    AC_MSG_RESULT(tkxConfig.sh has TKX_FULL_VERSION = $TKX_FULL_VERSION)

    # check if TKX_LIB_SPEC defined in tkxConfig.sh; if not, build our own
    if test "$TKX_LIB_SPEC" = "" ; then
      TKX_LIB_SPEC='-ltkx'
    fi
  fi

  # tclx installs its appinit.c in lib/ tree for tclx7.6.0b2+
  if test -r "$TCL_PREFIX/lib/tclX$TCLX_FULL_VERSION/tclXAppInit.c" ; then
    TCLX_LIB_LOC="lib/"
    TCLX_LIB_SEP=""
  else
    # tclx7.6.0b1
    if test -r "$TCL_PREFIX/lib/tclX/$TCLX_FULL_VERSION/tclXAppInit.c" ; then
      TCLX_LIB_LOC="lib/"
      TCLX_LIB_SEP="/"
    fi
    #else it must be tclx7.5.2-, defaults should work
  fi

  T_EXEC='${TCLX_EXEC}'
  if test "$tk" ; then
    W_EXEC='${WISHX_EXEC}'
  else
    W_EXEC=''
  fi

else

  # no tclx, set defines for standard tcl/tk

  T_EXEC='${TCL_EXEC}'
  if test "$tk" ; then
    W_EXEC='${WISH_EXEC}'
  else
    W_EXEC=''
  fi
fi

# change PROGS target if not building shared lib

if test "$shared" != "yes" ; then
  PROGS="${T_EXEC} ${W_EXEC}"
fi


#--------------------------------------------------------------------
#       sigh. TCL_LD_SEARCH_FLAGS is built for cc, we need one built for
#       ld.  try to coerce '-Wl,<flag>,<parm>' into just '<flag> <parm>'
#       other flags are left as is.
#--------------------------------------------------------------------
#	double-sigh.  The latest rev's of configure use gcc or cc
#	as the linker rather than ld directly, so the above no longer
#	applies.  We hack around this by checking for "cc" on the 
#	end of the linker command. (dhagberg 2000-07-10)
#--------------------------------------------------------------------

if echo "$TCL_SHLIB_LD" | egrep 'cc$|CC$|cc |CC '
then
  OTHER_LD_SEARCH_FLAGS="$TCL_LD_SEARCH_FLAGS"
else
  OTHER_LD_SEARCH_FLAGS=''
  SPACE=''
  for arg in $TCL_LD_SEARCH_FLAGS
  do
    newarg=''
    case $arg in
      -Wl*)
        IFS_SAVE=$IFS
        IFS=,
        for p in $arg
        do
          case $p in
            -Wl)
              ;;
            *)
              newarg="$newarg $p"
              ;;
          esac
        done
        IFS=$IFS_SAVE
        ;;
      *)
        newarg=$arg
        ;;
    esac
    OTHER_LD_SEARCH_FLAGS="${OTHER_LD_SEARCH_FLAGS}${SPACE}${newarg}"
    SPACE=' '
  done
fi


#--------------------------------------------------------------------
#  	Substitute all variables for Makefile
#--------------------------------------------------------------------

# fix TCL_LIB_DIR to platform independent lib dir
TCL_LIB_DIR=$TCL_PREFIX/lib

AC_SUBST(T_EXEC)
AC_SUBST(W_EXEC)
AC_SUBST(PROGS)
AC_SUBST(INSTALL_TARGET)
AC_SUBST(SYBASE)
AC_SUBST(SYBTCL_VERSION)
AC_SUBST(SYBTCL_LIBVER)
AC_SUBST(TCL_VERSION)
AC_SUBST(TK_VERSION)
AC_SUBST(TCL_PREFIX)
AC_SUBST(TCL_EXEC_PREFIX)
AC_SUBST(TCL_INC_DIR)
AC_SUBST(TCL_LIB_DIR)
AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TCL_LIBS)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TK_LIBS)
AC_SUBST(TK_XINCLUDES)
AC_SUBST(TK_XLIBSW)
AC_SUBST(TCLX_LIB_SPEC)
AC_SUBST(TCLX_LIBS)
AC_SUBST(TCLX_LIB_LOC)
AC_SUBST(TCLX_LIB_SEP)
AC_SUBST(TKX_LIB_SPEC)
AC_SUBST(TKX_LIBS)
AC_SUBST(TCLX_FULL_VERSION)
AC_SUBST(TKX_FULL_VERSION)
AC_SUBST(TCL_CC)
AC_SUBST(TCL_DEFS)
AC_SUBST(TCL_LD_FLAGS)
AC_SUBST(TCL_LD_SEARCH_FLAGS)
AC_SUBST(TCL_SHLIB_SUFFIX)
AC_SUBST(TCL_SHLIB_CFLAGS)
AC_SUBST(TCL_SHLIB_LD)
AC_SUBST(TCL_SHLIB_LD_LIBS)
AC_SUBST(SEARCH_DIRS)
AC_SUBST(OTHER_LD_SEARCH_FLAGS)
AC_SUBST(CTCOMPATINC)
AC_SUBST(CTCOMPATOBJ)
AC_SUBST(CTCOMPATSHO)
AC_SUBST(SYB_LIB)
AC_SUBST(SYB_SH_LIB)
AC_SUBST(SYB_SYS_LIBS)

AC_OUTPUT(Makefile pkgIndex.tcl)
